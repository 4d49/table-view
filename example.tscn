[gd_scene load_steps=4 format=3 uid="uid://xqn36jjxpthr"]

[ext_resource type="Theme" uid="uid://de8hd50qv2mti" path="res://addons/table-view/resources/table_view.tres" id="1_dxj5b"]
[ext_resource type="Script" path="res://addons/table-view/scripts/table_view.gd" id="2_1kret"]

[sub_resource type="GDScript" id="script"]
script/source = "# Copyright (c) 2024 Mansur Isaev and contributors - MIT License
# See `LICENSE.md` included in the source distribution for details.

extends PanelContainer


enum Type {
	ARMOR,
	BOOK,
	KEY,
	MISC,
	POTION,
	WEAPON,
}
enum Flags {
	EQUIPABLE = 1 << 0,
	STACKABLE = 1 << 1,
	CONSUMABLE = 1 << 2,
	TRADABLE = 1 << 3,
}

enum RowMenu {
	HIDE,
	REMOVE,
	MAX,
}

const COST_MIN = 0
const COST_MAX = 10_000

const WEIGHT_MIN = 0.0
const WEIGHT_MAX = 10.0


@onready var table_view: TableView = $VBoxContainer/TableView
@export_range(0, 10_000) var data_size: int = 10_000


var column_menu: PopupMenu = null
var row_menu: PopupMenu = null


func _ready() -> void:
	# The `add_column` method returns the index of the new column.
	# The first argument is the column title, the second its type.
	var uid := table_view.add_column(\"UID\", TableView.Type.STRING_NAME)
	var name := table_view.add_column(\"Name\", TableView.Type.STRING)
	var description := table_view.add_column(\"Description\", TableView.Type.STRING)
	var unique := table_view.add_column(\"Unique\", TableView.Type.BOOL)

	# The third argument is the type of hint.
	# The fourth argument is a type hint string.
	var cost := table_view.add_column(\"Cost\", TableView.Type.INT, TableView.Hint.RANGE, TableView.range_to_hint_string(COST_MIN, COST_MAX, 1))
	var weight := table_view.add_column(\"Weight\", TableView.Type.FLOAT, TableView.Hint.RANGE, TableView.range_to_hint_string(WEIGHT_MIN, WEIGHT_MAX, 0.1))

	# Create an enum column type.
	var type := table_view.add_column(\"Type\", TableView.Type.INT, TableView.Hint.ENUM, TableView.enum_to_hint_string(Type))
	# Create a flags column type.
	var flags := table_view.add_column(\"Flags\", TableView.Type.INT, TableView.Hint.FLAGS, TableView.flags_to_hint_string(Flags))

	var color := table_view.add_column(\"Color\", TableView.Type.COLOR, TableView.Hint.COLOR_NO_ALPHA)

	# Some method returning an array with dictionaries.
	for data: Dictionary in get_some_data():
		var row_idx := table_view.add_row()
		table_view.set_row_metadata(row_idx, data)

		# Previously declared variables are used as the column index.
		table_view.set_cell_value(row_idx, uid, data.uid)
		table_view.set_cell_value(row_idx, name, data.name)
		table_view.set_cell_value(row_idx, description, data.description)
		table_view.set_cell_value(row_idx, unique, data.unique)
		table_view.set_cell_value(row_idx, cost, data.cost)
		table_view.set_cell_value(row_idx, weight, data.weight)
		table_view.set_cell_value(row_idx, type, data.type)
		table_view.set_cell_value(row_idx, flags, data.flags)
		table_view.set_cell_value(row_idx, color, data.color)


func random_flags() -> int:
	var flag: int = 0

	if randi() % 2: flag |= Flags.EQUIPABLE
	if randi() % 2: flag |= Flags.STACKABLE
	if randi() % 2: flag |= Flags.CONSUMABLE
	if randi() % 2: flag |= Flags.TRADABLE

	return flag

func get_some_data() -> Array[Dictionary]:
	var data: Array[Dictionary] = []
	data.resize(data_size)

	for i: int in data_size:
		data[i] = {
			&\"uid\": StringName(\"%05X\" % i),
			&\"name\": \"Item name %d\" % i,
			&\"description\": \"Item description %d\" % i,
			&\"unique\": bool(randi() % 2),
			&\"cost\": snappedi(randi_range(COST_MIN, COST_MAX), 50),
			&\"weight\": snappedf(randf_range(WEIGHT_MIN, WEIGHT_MAX), 0.1),
			&\"type\": randi_range(Type.ARMOR, Type.WEAPON),
			&\"flags\": random_flags(),
			&\"color\": Color(randf(), randf(), randf()),
		}

	return data



func _on_filter_line_text_changed(text: String) -> void:
	const COLUMN_NAME = 1

	var callable: Callable = text.is_subsequence_ofn
	table_view.filter_rows_by_callable(COLUMN_NAME, callable)



func _on_column_clicked(column_idx: int) -> void:
	print(\"Column clicked: %d\" % column_idx)

func _on_column_double_clicked(column_idx: int) -> void:
	print(\"Column double clicked: %d\" % column_idx)

func _on_column_rmb_clicked(column_idx: int) -> void:
	const REMOVE = 1 << 8

	if is_instance_valid(column_menu):
		column_menu.queue_free()

	column_menu = PopupMenu.new()

	for i: int in table_view.get_column_count():
		column_menu.add_check_item(table_view.get_column_title(i))
		column_menu.set_item_checked(-1, table_view.is_column_visible(i))

	column_menu.add_separator()
	column_menu.add_item(\"Remove\", REMOVE)

	column_menu.focus_exited.connect(column_menu.queue_free)
	column_menu.id_pressed.connect(func(id: int) -> void:
		if id == REMOVE:
			return table_view.remove_column(column_idx)
		elif column_menu.is_item_checked(id):
			table_view.set_column_visible(id, false)
		else:
			table_view.set_column_visible(id, true)

		column_menu.set_item_checked(id, table_view.is_column_visible(id))
	)

	self.add_child(column_menu)
	column_menu.popup(Rect2i(get_local_mouse_position(), Vector2i.ZERO))



func _on_single_row_selected(row_idx: int) -> void:
	var metadata: Dictionary = table_view.get_row_metadata(row_idx)
	print(\"Row selected: %d; %s\" % [row_idx, metadata.name])

func _on_multiple_rows_selected(selected_rows: PackedInt32Array) -> void:
	print(\"Selected rows: %d\" % selected_rows.size())



func _on_row_double_clicked(row_idx: int) -> void:
	print(\"Row double clicked: %d\" % row_idx)

func _on_row_rmb_clicked(row_idx: int) -> void:
	if is_instance_valid(row_menu):
		row_menu.queue_free()

	row_menu = PopupMenu.new()
	row_menu.add_item(\"Hide\", RowMenu.HIDE)
	row_menu.add_item(\"Remove\", RowMenu.REMOVE)

	row_menu.focus_exited.connect(row_menu.queue_free)
	row_menu.id_pressed.connect(func(id: int) -> void:
		match id:
			RowMenu.HIDE:
				table_view.set_row_visible(row_idx, false)
			RowMenu.REMOVE:
				table_view.remove_row(row_idx)
	)

	self.add_child(row_menu)
	row_menu.popup(Rect2i(get_local_mouse_position(), Vector2i.ZERO))



func _on_cell_clicked(row_idx: int, column_idx: int) -> void:
	print(\"Cell clicked: Row %d; Column %d\" % [row_idx, column_idx])

func _on_cell_double_clicked(row_idx: int, column_idx: int) -> void:
	print(\"Cell double clicked: Row %d; Column %d\" % [row_idx, column_idx])

func _on_cell_rmb_clicked(row_idx: int, column_idx: int) -> void:
	print(\"Cell RMB clicked: Row %d; Column %d\" % [row_idx, column_idx])
"

[node name="Example" type="PanelContainer"]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("script")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 2

[node name="FilterLine" type="LineEdit" parent="VBoxContainer"]
layout_mode = 2
placeholder_text = "Filter rows by name"
clear_button_enabled = true

[node name="TableView" type="Control" parent="VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
theme = ExtResource("1_dxj5b")
script = ExtResource("2_1kret")

[connection signal="text_changed" from="VBoxContainer/FilterLine" to="." method="_on_filter_line_text_changed"]
[connection signal="cell_clicked" from="VBoxContainer/TableView" to="." method="_on_cell_clicked"]
[connection signal="cell_double_clicked" from="VBoxContainer/TableView" to="." method="_on_cell_double_clicked"]
[connection signal="cell_rmb_clicked" from="VBoxContainer/TableView" to="." method="_on_cell_rmb_clicked"]
[connection signal="column_clicked" from="VBoxContainer/TableView" to="." method="_on_column_clicked"]
[connection signal="column_double_clicked" from="VBoxContainer/TableView" to="." method="_on_column_double_clicked"]
[connection signal="column_rmb_clicked" from="VBoxContainer/TableView" to="." method="_on_column_rmb_clicked"]
[connection signal="multiple_rows_selected" from="VBoxContainer/TableView" to="." method="_on_multiple_rows_selected"]
[connection signal="row_double_clicked" from="VBoxContainer/TableView" to="." method="_on_row_double_clicked"]
[connection signal="row_rmb_clicked" from="VBoxContainer/TableView" to="." method="_on_row_rmb_clicked"]
[connection signal="single_row_selected" from="VBoxContainer/TableView" to="." method="_on_single_row_selected"]
